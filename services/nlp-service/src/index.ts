// ===== services/nlp-service/src/index.ts - VIETNAM TIMEZONE VERSION =====
import express from 'express';
import dotenv from 'dotenv';
import * as chrono from 'chrono-node';

dotenv.config();

const app = express();
app.use(express.json());

const PORT = process.env.NLP_SERVICE_PORT || 3002;

// H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i theo gi·ªù Vi·ªát Nam
const getVietnamTime = (): Date => {
  const now = new Date();
  const vietnamOffset = 7 * 60; // +7 gi·ªù = 420 ph√∫t
  const utcTime = now.getTime() + (now.getTimezoneOffset() * 60000);
  return new Date(utcTime + (vietnamOffset * 60000));
};

// Custom parser cho ti·∫øng Vi·ªát - s·ª≠ d·ª•ng gi·ªù Vi·ªát Nam
const parseVietnameseTime = (text: string, refDate: Date) => {
  const patterns = [
    // Gi·ªù:ph√∫t + ng√†y/th√°ng/nƒÉm
    /(\d{1,2})\s*[:h]\s*(\d{1,2})\s*(?:ph√∫t)?\s*(?:ng√†y|v√†o ng√†y)?\s*(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/i,
    // Gi·ªù + ng√†y/th√°ng/nƒÉm  
    /(\d{1,2})\s*(?:gi·ªù|h)\s*(?:ng√†y|v√†o ng√†y)?\s*(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/i,
    // Ch·ªâ c√≥ gi·ªù:ph√∫t
    /(\d{1,2})\s*[:h]\s*(\d{1,2})\s*(?:ph√∫t)?/i,
    // Ch·ªâ c√≥ gi·ªù
    /(\d{1,2})\s*(?:gi·ªù|h)/i,
    // H√¥m nay/ng√†y mai + gi·ªù
    /(h√¥m nay|ng√†y mai)\s*(?:l√∫c)?\s*(\d{1,2})\s*[:h]?\s*(\d{1,2})?\s*(?:ph√∫t|gi·ªù)?/i,
    // Bu·ªïi trong ng√†y + h√¥m nay
    /(s√°ng|tr∆∞a|chi·ªÅu|t·ªëi)\s*(h√¥m nay|nay)/i,
    // Bu·ªïi trong ng√†y + h√¥m sau/ng√†y mai
    /(s√°ng|tr∆∞a|chi·ªÅu|t·ªëi)\s*(h√¥m sau|ng√†y mai|mai)/i,
    // Sau X ph√∫t/gi·ªù
    /sau\s*(\d+)\s*(ph√∫t|gi·ªù)/i,
    // X ph√∫t/gi·ªù n·ªØa
    /(\d+)\s*(ph√∫t|gi·ªù)\s*n·ªØa/i
  ];

  for (let i = 0; i < patterns.length; i++) {
    const match = text.match(patterns[i]);
    if (match) {
      let resultDate = new Date(refDate);
      
      switch (i) {
        case 0: // Gi·ªù:ph√∫t + ng√†y/th√°ng/nƒÉm
          resultDate = new Date(parseInt(match[5]), parseInt(match[4]) - 1, parseInt(match[3]), 
                               parseInt(match[1]), parseInt(match[2]));
          return { date: resultDate, matchText: match[0] };
          
        case 1: // Gi·ªù + ng√†y/th√°ng/nƒÉm
          resultDate = new Date(parseInt(match[5]), parseInt(match[3]) - 1, parseInt(match[2]), 
                               parseInt(match[1]), 0);
          return { date: resultDate, matchText: match[0] };
          
        case 2: // Ch·ªâ c√≥ gi·ªù:ph√∫t
          resultDate.setHours(parseInt(match[1]), parseInt(match[2]), 0, 0);
          // N·∫øu th·ªùi gian ƒë√£ qua trong ng√†y, chuy·ªÉn sang ng√†y mai
          if (resultDate <= refDate) {
            resultDate.setDate(resultDate.getDate() + 1);
          }
          return { date: resultDate, matchText: match[0] };
          
        case 3: // Ch·ªâ c√≥ gi·ªù
          resultDate.setHours(parseInt(match[1]), 0, 0, 0);
          if (resultDate <= refDate) {
            resultDate.setDate(resultDate.getDate() + 1);
          }
          return { date: resultDate, matchText: match[0] };
          
        case 4: // H√¥m nay/ng√†y mai + gi·ªù
          if (match[1].toLowerCase() === 'ng√†y mai') {
            resultDate.setDate(resultDate.getDate() + 1);
          }
          resultDate.setHours(parseInt(match[2]), parseInt(match[3] || '0'), 0, 0);
          return { date: resultDate, matchText: match[0] };
          
        case 5: // Bu·ªïi trong ng√†y + h√¥m nay
          const timeOfDayToday = getTimeForPeriod(match[1].toLowerCase(), refDate);
          if (timeOfDayToday.getTime() <= refDate.getTime()) {
            // N·∫øu bu·ªïi ƒë√≥ ƒë√£ qua, kh√¥ng th·ªÉ ƒë·∫∑t nh·∫Øc nh·ªü
            return null;
          }
          return { date: timeOfDayToday, matchText: match[0] };
          
        case 6: // Bu·ªïi trong ng√†y + h√¥m sau/ng√†y mai
          let targetDate = new Date(refDate);
          targetDate.setDate(targetDate.getDate() + 1);
          const timeOfDayTomorrow = getTimeForPeriod(match[1].toLowerCase(), targetDate);
          return { date: timeOfDayTomorrow, matchText: match[0] };
          
        case 7: // Sau X ph√∫t/gi·ªù
          const afterValue = parseInt(match[1]);
          if (match[2] === 'gi·ªù') {
            resultDate.setTime(resultDate.getTime() + afterValue * 60 * 60 * 1000);
          } else {
            resultDate.setTime(resultDate.getTime() + afterValue * 60 * 1000);
          }
          return { date: resultDate, matchText: match[0] };
          
        case 8: // X ph√∫t/gi·ªù n·ªØa
          const laterValue = parseInt(match[1]);
          if (match[2] === 'gi·ªù') {
            resultDate.setTime(resultDate.getTime() + laterValue * 60 * 60 * 1000);
          } else {
            resultDate.setTime(resultDate.getTime() + laterValue * 60 * 1000);
          }
          return { date: resultDate, matchText: match[0] };
      }
    }
  }
  
  return null;
};

// H√†m x√°c ƒë·ªãnh th·ªùi gian cho c√°c bu·ªïi trong ng√†y
const getTimeForPeriod = (period: string, targetDate: Date): Date => {
  const result = new Date(targetDate);
  result.setSeconds(0, 0);
  
  switch (period) {
    case 's√°ng':
      result.setHours(7, 0); // 7:00 AM
      break;
    case 'tr∆∞a':
      result.setHours(12, 0); // 12:00 PM
      break;
    case 'chi·ªÅu':
      result.setHours(15, 0); // 3:00 PM
      break;
    case 't·ªëi':
      result.setHours(19, 0); // 7:00 PM
      break;
    default:
      result.setHours(9, 0); // M·∫∑c ƒë·ªãnh 9:00 AM
  }
  
  return result;
};

// L√†m s·∫°ch n·ªôi dung task
const cleanTaskContent = (text: string, timeText: string) => {
  let cleaned = text;
  
  // Lo·∫°i b·ªè ph·∫ßn th·ªùi gian ƒë∆∞·ª£c match
  if (timeText) {
    cleaned = cleaned.replace(timeText, '').trim();
  }
  
  // Lo·∫°i b·ªè c√°c t·ª´ kh√≥a ƒë·∫ßu c√¢u v√† gi·ªØa c√¢u
  const cleanupPatterns = [
    // T·ª´ kh√≥a ƒë·∫ßu c√¢u
    /^(nh·∫Øc t√¥i|nh·∫Øc|reminder|remind me|h√£y nh·∫Øc t√¥i|nh·∫Øcc t√¥i)\s*/i,
    /^(task|vi·ªác|c√¥ng vi·ªác)\s*/i,
    
    // T·ª´ "l√∫c" v√† c√°c bi·∫øn th·ªÉ
    /\s*l√∫c\s*/gi,
    /\s*v√†o l√∫c\s*/gi,
    /\s*v√†o\s*/gi,
    
    // C√°c t·ª´ th·ªùi gian th·ª´a
    /\s*ng√†y\s*/gi,
    /\s*gi·ªù\s*/gi,
    /\s*ph√∫t\s*/gi,
    
    // Pattern cho ng√†y th√°ng nƒÉm c√≤n s√≥t l·∫°i
    /\s*\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4}\s*/gi,
    /\s*\d{1,2}:\d{1,2}\s*/gi,
    /\s*\d{1,2}h\d{1,2}\s*/gi,
    
    // C√°c t·ª´ kh√¥ng c·∫ßn thi·∫øt kh√°c
    /\s*(h√¥m nay|ng√†y mai|nay|mai)\s*/gi,
    /\s*(sau|n·ªØa)\s*/gi,
    /\s*(s√°ng|tr∆∞a|chi·ªÅu|t·ªëi)\s*/gi,
    /\s*(h√¥m sau)\s*/gi,
  ];
  
  for (const pattern of cleanupPatterns) {
    cleaned = cleaned.replace(pattern, ' ').trim();
  }
  
  // Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† kho·∫£ng tr·∫Øng th·ª´a
  cleaned = cleaned.replace(/\s+/g, ' ').trim();
  
  // Lo·∫°i b·ªè c√°c t·ª´ ƒë∆°n l·∫ª kh√¥ng c√≥ nghƒ©a
  const meaninglessWords = ['h', 'v√†', 'c·ªßa', 'trong', 'tr√™n', 'd∆∞·ªõi', 'v·ªõi'];
  const words = cleaned.split(' ');
  const filteredWords = words.filter(word => 
    word.length > 1 && !meaninglessWords.includes(word.toLowerCase())
  );
  
  cleaned = filteredWords.join(' ');
  
  // N·∫øu kh√¥ng c√≤n n·ªôi dung, tr·∫£ v·ªÅ m·∫∑c ƒë·ªãnh
  if (!cleaned || cleaned.length < 2) {
    return 'C√¥ng vi·ªác kh√¥ng c√≥ ti√™u ƒë·ªÅ';
  }
  
  // Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu
  return cleaned.charAt(0).toUpperCase() + cleaned.slice(1);
};

// API x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n - S·ª¨ D·ª§NG GI·ªú VI·ªÜT NAM
app.post('/process', (req, res) => {
  try {
    const { text, refDate } = req.body;
    
    if (!text) {
      return res.status(400).json({ error: 'Text is required' });
    }
    
    // S·ª≠ d·ª•ng gi·ªù Vi·ªát Nam l√†m reference date
    const referenceDate = refDate ? new Date(refDate) : getVietnamTime();
    
    // Th·ª≠ parser ti·∫øng Vi·ªát tr∆∞·ªõc
    const vietnameseResult = parseVietnameseTime(text, referenceDate);
    
    let taskContent = text;
    let dueDate = null;
    let matchText = '';
    
    if (vietnameseResult) {
      dueDate = vietnameseResult.date;
      matchText = vietnameseResult.matchText;
      taskContent = cleanTaskContent(text, matchText);
    } else {
      // Fallback sang chrono-node cho c√°c tr∆∞·ªùng h·ª£p kh√°c
      const parsedResults = chrono.parse(text, referenceDate);
      
      if (parsedResults.length > 0) {
        const chronoResult = parsedResults[0];
        dueDate = chronoResult.start.date();
        matchText = chronoResult.text;
        taskContent = cleanTaskContent(text, matchText);
      } else {
        // N·∫øu kh√¥ng t√¨m th·∫•y th·ªùi gian, set default l√† 1 gi·ªù sau (gi·ªù Vi·ªát Nam)
        const defaultTime = new Date(referenceDate);
        defaultTime.setHours(defaultTime.getHours() + 1);
        dueDate = defaultTime;
        taskContent = cleanTaskContent(text, '');
      }
    }
    
    res.json({
      taskContent,
      dueDate: dueDate.toISOString(), // Tr·∫£ v·ªÅ nh∆∞ gi·ªù Vi·ªát Nam (s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng ·ªü c√°c service kh√°c)
      debug: {
        originalText: text,
        matchedTime: matchText,
        parsedBy: vietnameseResult ? 'vietnamese_parser' : 'chrono_node',
        vietnamTime: getVietnamTime().toISOString(),
        timezone: 'UTC+7 (Vietnam)'
      }
    });
    
  } catch (error) {
    console.error('Error processing text:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    service: 'NLP Service',
    timezone: 'UTC+7 (Vietnam)',
    currentVietnamTime: getVietnamTime().toISOString()
  });
});

app.listen(PORT, () => {
  console.log(`üß† NLP Service running on port ${PORT}`);
  console.log(`üåè Using Vietnam timezone (UTC+7)`);
  console.log(`‚è∞ Current Vietnam time: ${getVietnamTime().toISOString()}`);
});